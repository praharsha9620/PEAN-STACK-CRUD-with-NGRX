"use strict";

var express = require("express");
var cachePreventer = require("cachePreventer");
var handleError = require("./handleError");
var processRequest = require("./processRequest");

var knexRouter = function knexRouter(_ref) {
  var knex = _ref.knex;


  var router = express.Router();
  var singularRoutes = router.route("/:table/:id");
  var pluralRoutes = router.route("/:table");

  pluralRoutes.get(cachePreventer, async function (req, res) {
    try {
      var _processRequest = processRequest(req),
          table = _processRequest.table;

      var dbRes = await knex(table);
      res.json(dbRes);
    } catch (err) {
      handleError(err, res);
    }
  });

  singularRoutes.get(cachePreventer, async function (req, res) {
    try {
      var _processRequest2 = processRequest(req),
          table = _processRequest2.table,
          idColumn = _processRequest2.idColumn,
          id = _processRequest2.id;

      var dbRes = await knex(table).where(idColumn, id);
      if (dbRes.length > 0) res.json(dbRes[0]);else res.status(404).end();
    } catch (err) {
      handleError(err, res);
    }
  });

  singularRoutes.put(async function (req, res) {
    try {
      var _processRequest3 = processRequest(req),
          table = _processRequest3.table,
          idColumn = _processRequest3.idColumn,
          id = _processRequest3.id;

      var dbRes = await knex(table).update(req.body).where(idColumn, id);
      res.json(dbRes);
    } catch (err) {
      handleError(err, res);
    }
  });

  pluralRoutes.post(async function (req, res) {
    try {
      var _processRequest4 = processRequest(req),
          table = _processRequest4.table;

      var dbRes = await knex(table).insert(req.body);
      res.json(dbRes);
    } catch (err) {
      handleError(err, res);
    }
  });

  singularRoutes.delete(async function (req, res) {
    try {
      var _processRequest5 = processRequest(req),
          table = _processRequest5.table,
          idColumn = _processRequest5.idColumn,
          id = _processRequest5.id;

      var dbRes = await knex(table).del().where(idColumn, id);
      res.json(dbRes);
    } catch (err) {
      handleError(err, res);
    }
  });

  return router;
};

module.exports = knexRouter;